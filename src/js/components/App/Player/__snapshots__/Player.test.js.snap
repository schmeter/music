// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<Player
  activeIndex={0}
  isPlaying={false}
  nextIndex={1}
  playToggle={false}
  saveActiveTrack={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "test1",
            "tag": Object {
              "title": "test1",
            },
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setActiveIndex={[MockFunction]}
  setIsPlaying={[MockFunction]}
  tracks={
    Array [
      Object {
        "path": "test1",
        "tag": Object {
          "title": "test1",
        },
      },
      Object {
        "path": "test2",
        "tag": Object {
          "title": "test2",
        },
      },
    ]
  }
>
  <div
    className="player"
  >
    <Analyser
      audio={null}
      isPlaying={false}
    />
    <audio
      className="audio"
      controls={true}
      onEnded={[Function]}
      onError={[Function]}
      onPause={[Function]}
      onPlay={[Function]}
      preload="none"
      tabIndex="-1"
    />
  </div>
</Player>
`;

exports[`renders correctly 2`] = `
<Player
  activeIndex={1}
  isPlaying={false}
  nextIndex={1}
  playToggle={true}
  saveActiveTrack={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "test1",
            "tag": Object {
              "title": "test1",
            },
          },
        ],
        Array [
          Object {
            "path": "test2",
            "tag": Object {
              "title": "test2",
            },
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setActiveIndex={[MockFunction]}
  setIsPlaying={[MockFunction]}
  tracks={
    Array [
      Object {
        "path": "test1",
        "tag": Object {
          "title": "test1",
        },
      },
      Object {
        "path": "test2",
        "tag": Object {
          "title": "test2",
        },
      },
    ]
  }
>
  <div
    className="player"
  >
    <Analyser
      audio={
        <audio
          class="audio"
          controls=""
          preload="none"
          src="test2"
          tabindex="-1"
          title="undefined - test2"
        />
      }
      isPlaying={false}
    >
      <canvas
        className="canvas"
      />
    </Analyser>
    <audio
      className="audio"
      controls={true}
      onEnded={[Function]}
      onError={[Function]}
      onPause={[Function]}
      onPlay={[Function]}
      preload="none"
      tabIndex="-1"
    />
  </div>
</Player>
`;

exports[`renders correctly 3`] = `
<Player
  activeIndex={2}
  isPlaying={true}
  nextIndex={1}
  playToggle={false}
  saveActiveTrack={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "test1",
            "tag": Object {
              "title": "test1",
            },
          },
        ],
        Array [
          Object {
            "path": "test2",
            "tag": Object {
              "title": "test2",
            },
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setActiveIndex={[MockFunction]}
  setIsPlaying={[MockFunction]}
  tracks={Array []}
>
  <div
    className="player"
  >
    <Analyser
      audio={
        <audio
          class="audio"
          controls=""
          preload="none"
          src="test2"
          tabindex="-1"
          title="undefined - test2"
        />
      }
      isPlaying={true}
    >
      <canvas
        className="canvas"
      />
    </Analyser>
    <audio
      className="audio"
      controls={true}
      onEnded={[Function]}
      onError={[Function]}
      onPause={[Function]}
      onPlay={[Function]}
      preload="none"
      tabIndex="-1"
    />
  </div>
</Player>
`;

exports[`renders correctly 4`] = `
<Player
  activeIndex={0}
  isPlaying={false}
  nextIndex={1}
  playToggle={false}
  saveActiveTrack={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "test1",
            "tag": Object {
              "title": "test1",
            },
          },
        ],
        Array [
          Object {
            "path": "test2",
            "tag": Object {
              "title": "test2",
            },
          },
        ],
        Array [
          Object {
            "path": "test1",
            "tag": Object {
              "title": "test1",
            },
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  setActiveIndex={[MockFunction]}
  setIsPlaying={[MockFunction]}
  tracks={
    Array [
      Object {
        "path": "test1",
        "tag": Object {
          "title": "test1",
        },
      },
      Object {
        "path": "test2",
        "tag": Object {
          "title": "test2",
        },
      },
    ]
  }
>
  <div
    className="player"
  >
    <Analyser
      audio={
        <audio
          class="audio"
          controls=""
          preload="none"
          src="test1"
          tabindex="-1"
          title="undefined - test1"
        />
      }
      isPlaying={false}
    >
      <canvas
        className="canvas"
      />
    </Analyser>
    <audio
      className="audio"
      controls={true}
      onEnded={[Function]}
      onError={[Function]}
      onPause={[Function]}
      onPlay={[Function]}
      preload="none"
      tabIndex="-1"
    />
  </div>
</Player>
`;
